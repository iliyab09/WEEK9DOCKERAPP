# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self


variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '6a1014af-9c6b-4ae6-b40f-99ae97d63c9e'
  imageRepository: 'newimg'
  containerRegistry: 'mycreli.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'

  pool: 'mypool'
# Continuous Integration
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
  
    steps:
    - task: Docker@2
      displayName: Build an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
#commentfeaterure
    - task: Docker@2
      displayName: Push an image to azure container registry
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)

# Continuous Deployment Process for Staging Environment
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Staging
    displayName: Deploy to Staging
    environment:
      name: Staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Write your commands here
                  
                  sudo apt  install docker.io
                  sudo chmod 666 /var/run/docker.sock
            - task: Bash@3
              displayName: Stop Current Container
              inputs:
                targetType: 'inline'
                script: 'docker rm -f  containerBootCamp || true'
            - task: Docker@2
              displayName: 'Login to ACR'
              inputs:
                containerRegistry: $(dockerRegistryServiceConnection)
                command: 'login'
            
            - task: Bash@3
              displayName: Pull image From ACR
              inputs:
                targetType: 'inline'
                script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
                
              
            - task: Bash@3
              displayName: Put ENVs
              inputs:
                targetType: 'inline'
                script: 'docker run -d --restart=always --name containerBootCamp -p 8080:8080 -e PGHOST=$(PGHOST_stage) -e PORT=8080 -e HOST=0.0.0.0 -e PGUSERNAME=$(PGUSER_stage) -e PGDATABASE=postgres -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=5432 -e HOST_URL=$(HOST_URL_stage) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'


# Continuous Delivery Process for Production Environment
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: Production
    displayName: Deploy to Production
    environment:
      name: Production
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
            - task: Bash@3
              inputs:
                targetType: 'inline'
                script: |
                  # Write your commands here
                  
                  sudo apt  install docker.io
                  sudo chmod 666 /var/run/docker.sock
            - task: Bash@3
              displayName: Stop Current Container
              inputs:
                targetType: 'inline'
                script: 'docker rm -f  containerBootCamp || true'
            - task: Docker@2
              displayName: 'Login to ACR'
              inputs:
                containerRegistry: $(dockerRegistryServiceConnection)
                command: 'login'
            
            - task: Bash@3
              displayName: Pull image From ACR
              inputs:
                targetType: 'inline'
                script: 'docker pull $(containerRegistry)/$(imageRepository):$(tag)'
              
            - task: Bash@3
              displayName: Enter ENVs
              inputs:
                targetType: 'inline'
                script: 'docker run -d --restart=always --name containerBootCamp -p 8080:8080 -e PGHOST=$(PGHOST_prod) -e PORT=8080 -e  HOST=0.0.0.0 -e PGUSERNAME=$(PGUSER_prod) -e PGDATABASE=postgres -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=5432 -e HOST_URL=$(HOST_URL_prod) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'